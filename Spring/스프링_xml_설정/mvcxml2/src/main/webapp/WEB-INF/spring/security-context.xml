<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation=
	"http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-4.2.xsd
	http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- URL 설정 -->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/hello" access="hasAnyRole('USER, ADMIN')"/>
		<intercept-url pattern="/users/loginForm" access="permitAll"/>
		<intercept-url pattern="/users/joinForm" access="isAnonymous()"/>
		<intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
		<intercept-url pattern="/**" access="permitAll"/>
		
		<form-login login-page="/users/loginForm"
					default-target-url="/" 
					authentication-failure-url="/users/loginForm?error"
					username-parameter="userId"
					password-parameter="password"/>
		<logout logout-url="/logout" logout-success-url="/"/> 
		<access-denied-handler error-page="/users/authDenied"/>
		
		<csrf disabled="true"/> <!-- 스프링 시큐리티 4 부터는 CSRF 방지 기능이 디폴트로 작동한다.  -->
		
	</http>
	
	<!-- BCryptPasswordEncoder 빈 설정  -->
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<beans:bean id="CustomUserDetailsService" class="com.study.mvcxml2.user.CustomUserDetailsService" />
	
	<authentication-manager>
		<authentication-provider user-service-ref="CustomUserDetailsService">
			<!-- 로그인 시 비밀번호를 암호화해서 DB에서 조회한 비밀번호와 비교 -->
			<password-encoder ref="bcryptPasswordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
</beans:beans>

<!-- BCryptPasswordEncoder란??

	 스프링 시큐리티(Spring Seurity) 프레임워크에서 제공하는 클래스 중 하나로 
	 비밀번호를 암호화하는 데 사용할 수 있는 메서드를 가진 클래스입니다.
	 
	 BCryptPasswordEncoder는 
	 BCrypt 해싱 함수(BCrypt hashing function)를 사용해서 비밀번호를 인코딩해주는 메서드와 
	 사용자의 의해 제출된 비밀번호와 저장소에 저장되어 있는 비밀번호의 일치 여부를 확인해주는 메서드를 제공합니다.
	 
	 -->


<!-- default-target-url="" 은 로그인 후에 보여질 페이지 지정을 위함 -->

<!-- http://www.springframework.org/schema/security/spring-security.xsd를 다운로드 할 수 없다는 에러가 뜬다면 
	http://www.springframework.org/schema/security/spring-security.xsd 에 버전을 명시해줘야한다. 
	http://www.springframework.org/schema/security/spring-security-5.0.xsd (5.0버전일시 )-->
	
<!-- 설정 파일 코드를 블로그등에서 복사 붙여넣기 하면 오류가 날 수 있기 때문에 직접 작성하자.  -->

<!-- <http auto-config="true" use-expressions="false"> 일 경우
	access="ROLE_USER"로 해줘도 잘 작동된다.
	
	하지만 use-expressions="true"이거나 use-expressions에 관한 명시가 없다면
	access="hasRole('USER')" 로 해줘야 작동 된다.  -->

<!--태그설명

	<http>
		 웹과 관련된 모든 것을 정의할 수 있는 엘리먼트이며 
		 사용자의 권한을 설정하여 사용자별로 접근할 수 있는 웹 상의 페이지를 제어하거나 
		 로그인과 로그아웃시 처리하고 싶은 기능을 정의할 때 사용합니다.
		 
			- auto-config속성 : "true"로 설정하면 기본적으로 로그인페이지, http기본인증 로그아웃을 제공
			- use-expressions : "true"로 지정하면 Spring EL을 사용한다는 의미
		
		
	<interceptor-url>
		http태그의 하위 엘리먼트
		어떤 페이지를 액세스할 수 있는 권한을 정의하는 엘리먼트
		
			- pattern : 제어하고 싶은 path를 등록하여 롤을 정의하는 속성으로 접근할 수 있는 url을 정의
			- access : access속성에 접근할 수 있는 사용자의 ROLE을 정의 합니다.
					 이 ROLE은 security에서 제공되는 표현을 사용해야 하며 
					 admin인 경우 ROLE_ADMIN, 
					 일반 USER를 표현하는 것은 ROLE_USER입니다.
					 
					 use-expressions="false" 이면 access="ROLE_USER"
					 use-expressions="true" 이면 access="hasRole('USER')"
					 
		해당 url 접근 권한이 없다면 로그인 페이지로 리다이렉트됨 
		
					 
					 
	 <authentication-manager>
		 인증과 관련된 내용을 정의하는 엘리먼트입니다. 
		 인증 처리를 위해 구현한 클래스를 정의해야할 부분.


	<authentication-provider>
		<authentication-manager>의 하위 엘리먼트로 인증에 대한 정보를 제공하는 클래스를 정의합니다.


	<user-service>
		<authentication-provider>의 하위 엘리먼트  
		이 안에 <user>태그를 이용하여 사용자를 지정합니다. 
		
		
	<user>
		<user-service>의 하위 엘리먼트로 
		인증처리를 할 사용자의 userid와 password를 정의하고 role명을 정의합니다.
		user엘리먼트의  authorities은 각 user의 권한명을 정의하며 
		ROLE_ADMIN, ROLE_USER등을 정의합니다.
	 
 -->
 
 <!-- 로그인 페이지
 
 	위 설정대로 기본적인 스프링 시큐리티 설정이 모두 완료되면,
 	우리가 로그인 페이지를 만들지 않았어도 스프링 시큐리티에서 제공해주는 로그인 페이지를 사용할 수 있다.
 	
 	때문에 <interceptor-url>로 정의한, 보안되는 페이지에 접근했을 경우,
 	로그인이 안되어 있다면,
 	자동으로 스프링 시큐리티에서 제공하는 기본 페이지로 이동시켜준다. 
 	
 	물론 내가 직접 만든 로그인페이지로 적용도 가능하다.  
  -->
  
  
<!--  스프링 시큐리티 4 부터는 CSRF 방지 기능이 디폴트로 작동 
	스프링 시큐리티 4는 디폴트이기때문에 필수로 적용된다. 
	만약 CSRF를 사용하고 싶지 않다면, CSRF 태그에 disabled="true" 를 명시하면 된다. 
	
	하지만 CSRF 방지 기능을 사용한다면, 
	PATCH, POST, PUT, DELETE 요청에 CSRF 토큰을 반드시 포함해야 한다. (포함하지 않을시 405 에러)
	
	로그인, 로그아웃 설정과 화면을 커스터마이징 한다면, CSRF를 설정하고 폼(form)에 다음을 추가해야 한다.
	<input type="hidden" name="${_csrf.parameterName}" value="${_crsf.token}" />

-->